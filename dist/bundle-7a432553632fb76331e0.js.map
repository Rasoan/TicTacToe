{"version":3,"file":"bundle-7a432553632fb76331e0.js","mappings":"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","sources":["webpack://tic-tac-toe/./src/style.scss?d9ea","webpack://tic-tac-toe/./index.ts","webpack://tic-tac-toe/./src/GameBoardState/GameBoardState.ts","webpack://tic-tac-toe/./src/GameBoardState/gameBoardState_utils.ts","webpack://tic-tac-toe/./src/Settings/Settings.ts","webpack://tic-tac-toe/./src/constants/constants.ts","webpack://tic-tac-toe/./src/consts.ts","webpack://tic-tac-toe/./src/gameBoardUi/gameBoardUi.ts","webpack://tic-tac-toe/./src/localStorage/localStorage.ts","webpack://tic-tac-toe/./src/statisticInfo/statisticInfo.ts","webpack://tic-tac-toe/webpack/bootstrap","webpack://tic-tac-toe/webpack/runtime/make namespace object","webpack://tic-tac-toe/webpack/before-startup","webpack://tic-tac-toe/webpack/startup","webpack://tic-tac-toe/webpack/after-startup"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","'use strict';\r\n\r\nimport {\r\n    PLAYING_FIELD_DIMENSION_ID, RESET_STATISTICS_BUTTON_ID,\r\n    RESTART_GAME_BUTTON_ID,\r\n    ROOT_ID,\r\n    START_GAME_BUTTON_ID,\r\n    WINNING_STREAK_DIMENSION_ID,\r\n} from \"./src/constants/constants\";\r\nimport {\r\n    addListenerForChangeMaxWinStreak,\r\n    addListenerForButtonStartGame,\r\n    initializeSettingsFormFromLocalStorage, choiceRadioButtonFromFirstPlayerWalks,\r\n} from \"./src/Settings/Settings\";\r\nimport {\r\n    fillGameBoardHtmlElement,\r\n    handleEndGame,\r\n    handleReloadGame,\r\n    onClickGameBoard,\r\n} from \"./src/gameBoardUi/gameBoardUi\";\r\n\r\nimport './src/style.scss';\r\nimport {IWinnerInformation, PLAYER} from \"./src/GameBoardState/declaration/GameBoardState\";\r\nimport GameBoardState from \"./src/GameBoardState/GameBoardState\";\r\nimport {getValueForLocalStorage, LocalStorageKeys} from \"./src/localStorage/localStorage\";\r\nimport {handleResetStatistics, updateStatisticInformation} from \"./src/statisticInfo/statisticInfo\";\r\n\r\n{\r\n    const playingFieldDimension = document.getElementById(PLAYING_FIELD_DIMENSION_ID) as HTMLInputElement | null;\r\n    const winningStreakDimension = document.getElementById(WINNING_STREAK_DIMENSION_ID) as HTMLInputElement | null;\r\n    const buttonReloadGame = document.getElementById(RESTART_GAME_BUTTON_ID) as HTMLElement | null;\r\n    const buttonStartGame = document.getElementById(START_GAME_BUTTON_ID) as HTMLElement | null;\r\n    const buttonResetStatistics = document.getElementById(RESET_STATISTICS_BUTTON_ID) as HTMLElement | null;\r\n    const rootElement = document.getElementById(ROOT_ID) as HTMLElement | null;\r\n\r\n    let gameBoardHtmlElement = document.createElement('div');\r\n\r\n    const gameBoardStateJSON = getValueForLocalStorage(LocalStorageKeys.gameBoardStateKey);\r\n\r\n    let gameBoardState = gameBoardStateJSON\r\n        ? GameBoardState.fromJSON(gameBoardStateJSON)\r\n        : new GameBoardState({firstPlayerWalks: PLAYER.X, size: 3, winningStreak: 3})\r\n    ;\r\n\r\n    const {\r\n        winnerInformation,\r\n        firstPlayerWalks,\r\n    } = gameBoardState;\r\n    const {\r\n        statistics,\r\n    } = winnerInformation;\r\n    const {\r\n        countWin_x,\r\n        countWin_o,\r\n        countDraw,\r\n    } = statistics;\r\n\r\n    updateStatisticInformation(\r\n        String(countWin_x),\r\n        String(countWin_o),\r\n        String(countDraw),\r\n    );\r\n\r\n    choiceRadioButtonFromFirstPlayerWalks(firstPlayerWalks);\r\n\r\n    if (playingFieldDimension && winningStreakDimension) {\r\n        initializeSettingsFormFromLocalStorage(\r\n            playingFieldDimension,\r\n            winningStreakDimension,\r\n            gameBoardState,\r\n        );\r\n    } else {\r\n        console.error('playingFieldDimension of winningStreakDimension is not defined!')\r\n    }\r\n\r\n    if (playingFieldDimension && winningStreakDimension) {\r\n        addListenerForChangeMaxWinStreak(playingFieldDimension, winningStreakDimension);\r\n    } else {\r\n        console.error('playingFieldDimension or winningStreakDimension is not defined!');\r\n    }\r\n\r\n    if (buttonStartGame) {\r\n        addListenerForButtonStartGame(\r\n            buttonStartGame,\r\n            gameBoardHtmlElement,\r\n            gameBoardState,\r\n        );\r\n    } else {\r\n        console.error('buttonStartGame is not defined!');\r\n    }\r\n\r\n    fillGameBoardHtmlElement(gameBoardHtmlElement, gameBoardState);\r\n\r\n    gameBoardHtmlElement.addEventListener('click', function (event) {\r\n        onClickGameBoard.call(this, event, gameBoardState);\r\n    });\r\n\r\n    gameBoardState.subscribeToEndGame(\r\n        (winnerInformation: IWinnerInformation) => handleEndGame(gameBoardHtmlElement, winnerInformation)\r\n    );\r\n\r\n    buttonReloadGame?.addEventListener('click', () => handleReloadGame(gameBoardHtmlElement, gameBoardState));\r\n    buttonResetStatistics?.addEventListener('click', () => handleResetStatistics(gameBoardState));\r\n\r\n    if (rootElement) {\r\n        rootElement.appendChild(gameBoardHtmlElement);\r\n    }\r\n    else {\r\n        console.error('rootElement is not defined!');\r\n    }\r\n}","'use strict';\r\n\r\nimport type {ICoordinate, IGameBoardStateOptions, IWinnerInformation,} from \"./declaration/GameBoardState\";\r\nimport {COORDINATE, IMarkInformation, ORIENTATION, PLAYER, WINNER,} from \"./declaration/GameBoardState\";\r\n\r\nimport {\r\n    _checkIsCanMovie,\r\n    _checkIsNotAlreadyMarkedCell,\r\n    _checkIsValidBoardFormat,\r\n    _checkIsValidCoordinate,\r\n    _getArrayOfCoordinatesMarksInLine,\r\n    _getDefaultBordValues,\r\n    _normalizeCoordinate,\r\n    _playerToWinner,\r\n    _togglePlayer,\r\n} from \"./gameBoardState_utils\";\r\n\r\nexport default class GameBoardState {\r\n    private _board: Array<PLAYER[]>;\r\n    private _playerWalks: PLAYER.X | PLAYER.O = PLAYER.X;\r\n    private _winnerInformation: IWinnerInformation;\r\n\r\n    private _winningStreak: number;\r\n    private _firstPlayerWalks: PLAYER.X | PLAYER.O = PLAYER.X;\r\n\r\n    private _handleEndGame = (winnerInformation: IWinnerInformation) => { console.error('Method handleEndGame is not defined!', winnerInformation) };\r\n\r\n    public subscribeToEndGame(collback: (winnerInformation: IWinnerInformation) => void) {\r\n        this._handleEndGame = collback;\r\n    }\r\n\r\n    constructor(options: IGameBoardStateOptions = {}) {\r\n        const {\r\n            board,\r\n            playerWalks,\r\n            winnerInformation = {\r\n                winner: WINNER._UNKNOWN_,\r\n                winnerDirectionLine: ORIENTATION._UNKNOWN_,\r\n                winningLine: [],\r\n                statistics: {\r\n                    countDraw: 0,\r\n                    countWin_o: 0,\r\n                    countWin_x: 0,\r\n                }\r\n            },\r\n            size = 3,\r\n            winningStreak,\r\n            firstPlayerWalks = PLAYER.X,\r\n        } = options;\r\n\r\n        if (board && playerWalks) {\r\n            const isValidBoard = _checkIsValidBoardFormat(board);\r\n\r\n            if (!isValidBoard) {\r\n                throw new TypeError(`Board is not valid! {board: ${board}}`);\r\n            }\r\n\r\n            this._board = board;\r\n            this._playerWalks = playerWalks;\r\n        } else {\r\n            this._board = _getDefaultBordValues(size);\r\n            this._playerWalks = firstPlayerWalks;\r\n        }\r\n\r\n        this._winningStreak = winningStreak && winningStreak <= this.size ? winningStreak: this.size;\r\n        this._firstPlayerWalks = firstPlayerWalks;\r\n        this._winnerInformation = winnerInformation;\r\n    }\r\n\r\n    get board() {\r\n        return this._board.slice();\r\n    }\r\n\r\n    get countSteps() {\r\n        return this._board.flat().filter(cell => cell !== PLAYER._VOID_).length;\r\n    }\r\n\r\n    get playerWalks() {\r\n        return this._playerWalks;\r\n    }\r\n\r\n    get winningStreak() {\r\n        return this._winningStreak;\r\n    }\r\n\r\n    get winnerInformation(): IWinnerInformation {\r\n        const { winningLine } = this._winnerInformation;\r\n\r\n        return {\r\n            ...this._winnerInformation,\r\n            winningLine: winningLine ? [ ...winningLine ]: [],\r\n        };\r\n    }\r\n\r\n    get firstPlayerWalks() {\r\n        return this._firstPlayerWalks;\r\n    }\r\n\r\n    get size() {\r\n        return this._board.length;\r\n    }\r\n\r\n    get numberOfMoves() {\r\n        return this._board.length * this._board.length;\r\n    }\r\n\r\n    public addMark(coordinate: ICoordinate): IMarkInformation | void {\r\n        const {\r\n            _playerWalks: playerWalks,\r\n            _board: board,\r\n            _winnerInformation: winnerInformation,\r\n        } = this;\r\n        const {\r\n            winner,\r\n        } = winnerInformation;\r\n\r\n        const isValidCoordinate = _checkIsValidCoordinate(coordinate, board.length);\r\n\r\n        if (!isValidCoordinate) {\r\n            const errorText = 'Coordinate not valid!';\r\n\r\n            throw new Error(errorText);\r\n        }\r\n\r\n        const {x, y} = _normalizeCoordinate(coordinate);\r\n\r\n        if (winner === WINNER.DRAW || winner === WINNER.PLAYER_O || winner === WINNER.PLAYER_X) {\r\n            const errorText = 'They made a move, but the game is over and there is a winner!';\r\n\r\n            throw new Error(errorText);\r\n        }\r\n\r\n        const isNotAlreadyMarkedCell = _checkIsNotAlreadyMarkedCell(this._board[y][x]);\r\n\r\n        if (isNotAlreadyMarkedCell) {\r\n            // todo: здесь костыль, какой-то не понятный баг с сетом значения в клеточку\r\n            const selectRow = [...board[y]];\r\n            selectRow[x] = playerWalks;\r\n            board[y] = selectRow;\r\n\r\n            const isVictory = this._checkForVictory({x, y});\r\n            const isCanMovie = _checkIsCanMovie(this.countSteps, board.length * board.length);\r\n\r\n            if (isVictory) {\r\n                this._handleEndGame(this.winnerInformation);\r\n\r\n                return;\r\n            }\r\n\r\n            if (!isCanMovie) {\r\n                winnerInformation.winner = WINNER.DRAW;\r\n                this.winnerInformation.statistics.countDraw++;\r\n\r\n                this._handleEndGame(this.winnerInformation);\r\n\r\n                return;\r\n            }\r\n\r\n            this._playerWalks = _togglePlayer(playerWalks);\r\n\r\n            return {\r\n                playerWalks,\r\n            }\r\n        }\r\n        else {\r\n            const errorText = 'Error! Already marked cell!!';\r\n\r\n            throw new Error(errorText);\r\n        }\r\n    }\r\n\r\n    private _checkForVictory(coordinate: ICoordinate): boolean {\r\n        const {\r\n            _winningStreak: winningStreak,\r\n            _playerWalks: playerWalks,\r\n            _board: board,\r\n            _winnerInformation: winnerInformation,\r\n        } = this;\r\n\r\n        let arrayOfCoordinatesMarksInLine: ICoordinate[];\r\n\r\n        arrayOfCoordinatesMarksInLine = _getArrayOfCoordinatesMarksInLine(\r\n            coordinate,\r\n            ORIENTATION.VERTICAL,\r\n            board,\r\n            playerWalks,\r\n        );\r\n\r\n        if (arrayOfCoordinatesMarksInLine.length >= winningStreak) {\r\n            this._fillWinnerInformation(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.VERTICAL,\r\n            );\r\n\r\n            return true;\r\n        }\r\n\r\n        arrayOfCoordinatesMarksInLine = _getArrayOfCoordinatesMarksInLine(\r\n            coordinate,\r\n            ORIENTATION.HORIZONTAL,\r\n            board,\r\n            playerWalks,\r\n        );\r\n        if (arrayOfCoordinatesMarksInLine.length >= winningStreak) {\r\n            this._fillWinnerInformation(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.HORIZONTAL,\r\n            );\r\n\r\n            return true;\r\n        }\r\n\r\n        arrayOfCoordinatesMarksInLine = _getArrayOfCoordinatesMarksInLine(\r\n            coordinate,\r\n            ORIENTATION.DIAGONAL_RIGHT,\r\n            board,\r\n            playerWalks,\r\n        );\r\n        if (arrayOfCoordinatesMarksInLine.length >= winningStreak) {\r\n            this._fillWinnerInformation(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.DIAGONAL_RIGHT,\r\n            );\r\n\r\n            return true;\r\n        }\r\n\r\n        arrayOfCoordinatesMarksInLine = _getArrayOfCoordinatesMarksInLine(\r\n            coordinate,\r\n            ORIENTATION.DIAGONAL_LEFT,\r\n            board,\r\n            playerWalks,\r\n        );\r\n\r\n        if (arrayOfCoordinatesMarksInLine.length >= winningStreak) {\r\n            this._fillWinnerInformation(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.DIAGONAL_LEFT,\r\n            );\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _fillWinnerInformation(\r\n        arrayOfCoordinatesMarksInLine: ICoordinate[],\r\n        orientation: ORIENTATION,\r\n    ) {\r\n        const {\r\n            playerWalks,\r\n            _winnerInformation: winnerInformation,\r\n        } = this;\r\n\r\n        winnerInformation.winner = _playerToWinner(playerWalks);\r\n        winnerInformation.winnerDirectionLine = orientation;\r\n        winnerInformation.winningLine = arrayOfCoordinatesMarksInLine;\r\n\r\n        if (playerWalks === PLAYER.X) {\r\n            winnerInformation.statistics.countWin_x++;\r\n        } else if (playerWalks === PLAYER.O) {\r\n            winnerInformation.statistics.countWin_o++;\r\n        }\r\n    }\r\n\r\n    public restartGame() {\r\n        this._playerWalks = this._firstPlayerWalks;\r\n        this._board = _getDefaultBordValues(this.size);\r\n        this._winnerInformation = {\r\n            ...this.winnerInformation,\r\n            winner: WINNER._UNKNOWN_,\r\n            winnerDirectionLine: ORIENTATION._UNKNOWN_,\r\n            winningLine: [],\r\n        };\r\n    }\r\n\r\n    public start(options: IGameBoardStateOptions = {}) {\r\n        const {\r\n            board,\r\n            playerWalks,\r\n            winnerInformation = {\r\n                winner: WINNER._UNKNOWN_,\r\n                winnerDirectionLine: ORIENTATION._UNKNOWN_,\r\n                winningLine: [],\r\n            },\r\n            size = 3,\r\n            winningStreak,\r\n            firstPlayerWalks = PLAYER.X,\r\n        } = options;\r\n\r\n        if (board && playerWalks) {\r\n            const isValidBoard = _checkIsValidBoardFormat(board);\r\n\r\n            if (!isValidBoard) {\r\n                throw new TypeError(`Board is not valid! {board: ${board}}`);\r\n            }\r\n\r\n            this._board = board;\r\n            this._playerWalks = playerWalks;\r\n        } else {\r\n            this._board = _getDefaultBordValues(size);\r\n            this._playerWalks = firstPlayerWalks;\r\n        }\r\n\r\n        this._winningStreak = winningStreak && winningStreak <= this.size ? winningStreak: this.size;\r\n        this._firstPlayerWalks = firstPlayerWalks;\r\n        this._winnerInformation = {\r\n            ...this._winnerInformation,\r\n            ...winnerInformation,\r\n        };\r\n    }\r\n\r\n    public resetStatistics() {\r\n        this._winnerInformation.statistics.countWin_o = 0;\r\n        this._winnerInformation.statistics.countWin_x = 0;\r\n        this._winnerInformation.statistics.countDraw = 0;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        const {\r\n            board,\r\n            playerWalks,\r\n            winnerInformation,\r\n            winningStreak,\r\n            firstPlayerWalks,\r\n        } = this;\r\n\r\n        return JSON.stringify({\r\n            board,\r\n            playerWalks,\r\n            winnerInformation,\r\n            winningStreak,\r\n            firstPlayerWalks,\r\n        });\r\n    }\r\n\r\n    static fromJSON(gameBoardStateJSON: string): GameBoardState {\r\n        const gameBoardStateFields = JSON.parse(gameBoardStateJSON);\r\n\r\n        return new GameBoardState(gameBoardStateFields);\r\n    }\r\n}","import {DIRECTION, ICoordinate, ORIENTATION, PLAYER, WINNER} from \"./declaration/GameBoardState\";\r\n\r\nexport function _getDefaultBordValues(size: number) {\r\n    return new Array(size).fill(Array(size).fill(PLAYER._VOID_));\r\n}\r\n\r\nexport function _togglePlayer(playerWalks: PLAYER) {\r\n    switch (playerWalks) {\r\n        case PLAYER.X: {\r\n            return PLAYER.O;\r\n        }\r\n        case PLAYER.O: {\r\n            return PLAYER.X;\r\n        }\r\n        default: {\r\n            throw new Error('Unknown player mark!');\r\n        }\r\n    }\r\n}\r\n\r\nexport function _normalizeCoordinate(coordinate: ICoordinate) {\r\n    return {x: coordinate.x - 1, y: coordinate.y - 1}\r\n}\r\n\r\nexport function _playerToWinner(playerWalks: PLAYER): WINNER.PLAYER_X | WINNER.PLAYER_O {\r\n    if (playerWalks === PLAYER.X) {\r\n        return WINNER.PLAYER_X;\r\n    }\r\n    if (playerWalks === PLAYER.O) {\r\n        return WINNER.PLAYER_O;\r\n    }\r\n\r\n    throw new Error('Player not defined!');\r\n}\r\n\r\nexport function _getArrayOfCoordinatesMarksInLine(\r\n    coordinate: ICoordinate,\r\n    orientation: ORIENTATION,\r\n    board: Array<PLAYER[]>,\r\n    playerWalks: PLAYER,\r\n) {\r\n    let arrayOfCoordinatesMarksInLine = [];\r\n\r\n    function _getArrayOfCoordinatesMarksInDirection(\r\n        coordinate: ICoordinate,\r\n        direction: DIRECTION,\r\n        board: Array<PLAYER[]>,\r\n        playerWalks: PLAYER,\r\n    ): ICoordinate[] {\r\n        const {\r\n            x,\r\n            y,\r\n        } = coordinate;\r\n\r\n        const arrayOfCoordinatesMarksInDirection = [] as ICoordinate[];\r\n\r\n        switch (direction) {\r\n            case DIRECTION.UP: {\r\n                for (let currentY = y - 1; currentY >= 0; currentY--) {\r\n                    const currentCell = board[currentY][x];\r\n                    const currentCoordinates: ICoordinate = { x, y: currentY };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.DOWN: {\r\n                for (let currentY = y + 1; currentY < board.length; currentY++) {\r\n                    const currentCell = board[currentY][x];\r\n                    const currentCoordinates: ICoordinate = { x, y: currentY };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.LEFT: {\r\n                for (let currentX = x - 1; currentX >= 0; currentX--) {\r\n                    const currentCell = board[y][currentX];\r\n                    const currentCoordinates: ICoordinate = { x: currentX, y };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.RIGHT: {\r\n                for (let currentX = x + 1; currentX < board.length; currentX++) {\r\n                    const currentCell = board[y][currentX];\r\n                    const currentCoordinates: ICoordinate = { x: currentX, y };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.UP_RIGHT: {\r\n                for (let currentX = x + 1, currentY = y - 1; currentY >= 0 && currentX < board.length;) {\r\n                    const currentCell = board[currentY][currentX];\r\n                    const currentCoordinates: ICoordinate = { x: currentX, y: currentY };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n\r\n                    currentX++;\r\n                    currentY--;\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.DOWN_RIGHT: {\r\n                for (let currentX = x + 1, currentY = y + 1; currentY < board.length && currentX < board.length;) {\r\n                    const currentCell = board[currentY][currentX];\r\n                    const currentCoordinates: ICoordinate = { x: currentX, y: currentY };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n\r\n                    currentX++;\r\n                    currentY++;\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.UP_LEFT: {\r\n                for (let currentX = x - 1, currentY = y - 1; currentY >= 0 && currentX >= 0;) {\r\n                    const currentCell = board[currentY][currentX];\r\n                    const currentCoordinates: ICoordinate = { x: currentX, y: currentY };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n\r\n                    currentX--;\r\n                    currentY--;\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            case DIRECTION.DOWN_LEFT: {\r\n                for (let currentX = x - 1, currentY = y + 1; currentY < board.length && currentX >= 0;) {\r\n                    const currentCell = board[currentY][currentX];\r\n                    const currentCoordinates: ICoordinate = { x: currentX, y: currentY };\r\n\r\n                    if (currentCell === playerWalks) {\r\n                        arrayOfCoordinatesMarksInDirection.push(currentCoordinates);\r\n                    }\r\n                    else {\r\n                        return arrayOfCoordinatesMarksInDirection;\r\n                    }\r\n\r\n                    currentX--;\r\n                    currentY++;\r\n                }\r\n\r\n                return arrayOfCoordinatesMarksInDirection;\r\n            }\r\n            default: {\r\n                throw new Error('Direction is no found!');\r\n            }\r\n        }\r\n    }\r\n\r\n    switch (orientation) {\r\n        case ORIENTATION.VERTICAL: {\r\n            const arrayOfCoordinatesMarksInDirection_up = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.UP,\r\n                board,\r\n                playerWalks,\r\n            );\r\n            const arrayOfCoordinatesMarksInDirection_down = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.DOWN,\r\n                board,\r\n                playerWalks,\r\n            );\r\n\r\n            arrayOfCoordinatesMarksInLine = [\r\n                coordinate,\r\n                ...arrayOfCoordinatesMarksInDirection_up,\r\n                ...arrayOfCoordinatesMarksInDirection_down,\r\n            ];\r\n\r\n            arrayOfCoordinatesMarksInLine = _sortArrayOfCoordinatesMarksForOrientationLine(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.VERTICAL,\r\n            );\r\n\r\n            break;\r\n        }\r\n        case ORIENTATION.HORIZONTAL: {\r\n            const arrayOfCoordinatesMarksInDirection_right = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.RIGHT,\r\n                board,\r\n                playerWalks,\r\n            );\r\n            const arrayOfCoordinatesMarksInDirection_left = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.LEFT,\r\n                board,\r\n                playerWalks,\r\n            );\r\n\r\n            arrayOfCoordinatesMarksInLine = [\r\n                coordinate,\r\n                ...arrayOfCoordinatesMarksInDirection_right,\r\n                ...arrayOfCoordinatesMarksInDirection_left,\r\n            ];\r\n\r\n            arrayOfCoordinatesMarksInLine = _sortArrayOfCoordinatesMarksForOrientationLine(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.HORIZONTAL,\r\n            );\r\n\r\n            break;\r\n        }\r\n        case ORIENTATION.DIAGONAL_RIGHT: {\r\n            const arrayOfCoordinatesMarksInDirection_upRight = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.UP_RIGHT,\r\n                board,\r\n                playerWalks,\r\n            );\r\n            const arrayOfCoordinatesMarksInDirection_downLeft = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.DOWN_LEFT,\r\n                board,\r\n                playerWalks,\r\n            );\r\n\r\n            arrayOfCoordinatesMarksInLine = [\r\n                coordinate,\r\n                ...arrayOfCoordinatesMarksInDirection_upRight,\r\n                ...arrayOfCoordinatesMarksInDirection_downLeft,\r\n            ];\r\n\r\n            arrayOfCoordinatesMarksInLine = _sortArrayOfCoordinatesMarksForOrientationLine(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.DIAGONAL_RIGHT,\r\n            );\r\n\r\n            break;\r\n        }\r\n        case ORIENTATION.DIAGONAL_LEFT: {\r\n            const arrayOfCoordinatesMarksInDirection_upLeft = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.UP_LEFT,\r\n                board,\r\n                playerWalks,\r\n            );\r\n            const arrayOfCoordinatesMarksInDirection_downRight = _getArrayOfCoordinatesMarksInDirection(\r\n                coordinate,\r\n                DIRECTION.DOWN_RIGHT,\r\n                board,\r\n                playerWalks,\r\n            );\r\n\r\n            arrayOfCoordinatesMarksInLine = [\r\n                coordinate,\r\n                ...arrayOfCoordinatesMarksInDirection_upLeft,\r\n                ...arrayOfCoordinatesMarksInDirection_downRight,\r\n            ];\r\n\r\n            arrayOfCoordinatesMarksInLine = _sortArrayOfCoordinatesMarksForOrientationLine(\r\n                arrayOfCoordinatesMarksInLine,\r\n                ORIENTATION.DIAGONAL_LEFT,\r\n            );\r\n\r\n            break;\r\n        }\r\n        default: {\r\n            throw new Error('ORIENTATION is not found!');\r\n        }\r\n    }\r\n\r\n    return arrayOfCoordinatesMarksInLine;\r\n}\r\n\r\nexport function _checkIsValidCoordinate(coordinate: ICoordinate, sizeBoard: number): boolean {\r\n    const {\r\n        x,\r\n        y,\r\n    } = coordinate;\r\n\r\n    return y > 0 && x > 0 && y <= sizeBoard && x <= sizeBoard;\r\n}\r\n\r\nexport function _checkIsCanMovie(countSteps: number, sizeBoard: number): boolean {\r\n    return countSteps < sizeBoard;\r\n}\r\n\r\nexport function _checkIsValidBoardFormat(gameBoard: Array<Array<string>>) {\r\n    for (const currentRow of gameBoard) {\r\n        if (currentRow.length !== gameBoard.length) {\r\n            return false;\r\n        }\r\n\r\n        for (const markCurrentCell of currentRow) {\r\n            const isValidMark = _checkIsValidMark(markCurrentCell);\r\n\r\n            if (!isValidMark) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function _checkIsValidMark(mark: string): boolean {\r\n    return mark === PLAYER.X || mark === PLAYER.O || mark === PLAYER._VOID_;\r\n}\r\n\r\nexport function _checkIsNotAlreadyMarkedCell(markCell: PLAYER) {\r\n    return markCell === PLAYER._VOID_;\r\n}\r\n\r\nexport function _sortArrayOfCoordinatesMarksForOrientationLine(arrayOfCoordinates: ICoordinate[], orientationLine: ORIENTATION) {\r\n    if (orientationLine === ORIENTATION.HORIZONTAL) {\r\n        return arrayOfCoordinates.sort((prevCoordinate, nextCoordinate) => prevCoordinate.x - nextCoordinate.x);\r\n    }\r\n\r\n    return arrayOfCoordinates.sort((prevCoordinate, nextCoordinate) => prevCoordinate.y - nextCoordinate.y);\r\n}","'use strict';\r\n\r\nimport {\r\n    FIRST_PLAYER_WALKS_RADIO_BUTTON_NAME,\r\n    PLAYING_FIELD_DIMENSION_ID,\r\n    WINNING_STREAK_DIMENSION_ID\r\n} from \"../constants/constants\";\r\nimport GameBoardState from \"../GameBoardState/GameBoardState\";\r\nimport {handleStartGame} from \"../gameBoardUi/gameBoardUi\";\r\nimport {PLAYER} from \"../GameBoardState/declaration/GameBoardState\";\r\n\r\nexport function addListenerForChangeMaxWinStreak(\r\n    playingFieldDimension: HTMLInputElement,\r\n    winningStreakDimension: HTMLInputElement,\r\n): void {\r\n    playingFieldDimension.addEventListener('change', (event: Event) => {\r\n        const playingFieldDimensionValue: string = (event.target as HTMLInputElement).value;\r\n        const winningStreakDimensionValue = winningStreakDimension.value;\r\n\r\n        winningStreakDimension.setAttribute('max', playingFieldDimensionValue);\r\n\r\n        if (Number(playingFieldDimensionValue) < Number(winningStreakDimensionValue)) {\r\n            winningStreakDimension.value = playingFieldDimensionValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function initializeSettingsFormFromLocalStorage(\r\n    playingFieldDimension: HTMLInputElement,\r\n    winningStreakDimension: HTMLInputElement,\r\n    gameBoardState: GameBoardState,\r\n) {\r\n    const {\r\n        size: playingFieldDimensionValue,\r\n        winningStreak: winningStreakDimensionValue,\r\n    } = gameBoardState;\r\n\r\n    playingFieldDimension.setAttribute('value', String(playingFieldDimensionValue));\r\n    winningStreakDimension.setAttribute('value', String(winningStreakDimensionValue));\r\n    winningStreakDimension.setAttribute('max', String(playingFieldDimensionValue));\r\n}\r\n\r\n\r\nexport function addListenerForButtonStartGame(\r\n    buttonStartGame: HTMLElement,\r\n    gameBoardHtmlElement: HTMLElement,\r\n    gameBoardState: GameBoardState,\r\n): void {\r\n    buttonStartGame.addEventListener('click', (event: MouseEvent) => {\r\n        const playingFieldDimension = document.getElementById(PLAYING_FIELD_DIMENSION_ID) as HTMLInputElement | null;\r\n        const winningStreakDimension = document.getElementById(WINNING_STREAK_DIMENSION_ID) as HTMLInputElement | null;\r\n        const firstPlayerWalksRadioButton = document.querySelector(`input[name=${FIRST_PLAYER_WALKS_RADIO_BUTTON_NAME}]:checked`) as HTMLInputElement | null;\r\n\r\n        if (!playingFieldDimension || !winningStreakDimension || !firstPlayerWalksRadioButton) {\r\n            throw new Error('playingFieldDimension || winningStreakDimension || firstPlayerWalksRadioButton is not defined');\r\n        }\r\n\r\n        const size = Number(playingFieldDimension.value);\r\n        const winningStreak = Number(winningStreakDimension.value);\r\n        const firstPlayerWalks = firstPlayerWalksRadioButton.value;\r\n\r\n        if (firstPlayerWalks !== PLAYER.X && firstPlayerWalks !== PLAYER.O) {\r\n            throw new Error(\"No valid firstPlayerWalks value!\");\r\n        }\r\n\r\n        gameBoardState.start({\r\n            size,\r\n            winningStreak,\r\n            firstPlayerWalks,\r\n        });\r\n\r\n        handleStartGame(gameBoardHtmlElement, gameBoardState)\r\n    });\r\n}\r\n\r\nexport function choiceRadioButtonFromFirstPlayerWalks(player: PLAYER.X | PLAYER.O) {\r\n    const radioButtons = document.querySelectorAll(`input[name=${FIRST_PLAYER_WALKS_RADIO_BUTTON_NAME}]`) as unknown as HTMLInputElement[];\r\n\r\n    for (const radioButton of radioButtons) {\r\n        radioButton.checked = radioButton.value === player;\r\n    }\r\n}","export const ROOT_ID = '__ROOT_ID__';\r\nexport const PLAYING_FIELD_DIMENSION_ID = '__PLAYING_FIELD_DIMENSION_ID__';\r\nexport const WINNING_STREAK_DIMENSION_ID = '__WINNING_STREAK_DIMENSION_ID__';\r\nexport const FIRST_PLAYER_WALKS_RADIO_BUTTON_NAME = 'firstPlayerWalks';\r\nexport const GAME_BOARD_HTML_ELEMENT_ID = '__GAME_BOARD_ID__';\r\nexport const RESTART_GAME_BUTTON_ID = '__RESTART_GAME_BUTTON_ID__';\r\nexport const START_GAME_BUTTON_ID = '__START_GAME_BUTTON_ID__';\r\nexport const RESET_STATISTICS_BUTTON_ID = '__RESET_STATISTICS_BUTTON_ID__';\r\nexport const STATISTICS_COUNT_VALUE_WIN_O = 'STATISTICS-COUNT-VALUE_WIN-O';\r\nexport const STATISTICS_COUNT_VALUE_WIN_X = 'STATISTICS-COUNT-VALUE_WIN-X';\r\nexport const STATISTICS_COUNT_VALUE_DRAW = 'STATISTICS-COUNT-VALUE_WIN-DRAW';","/* -------------------------------------------------------- */\r\n// constants for styles\r\n// container\r\nexport const MOVE_GAMER_X = 'move_gamer_X';\r\nexport const MOVE_GAMER_O = 'move_gamer_O';\r\nexport const WINNER_GAMER_X = 'winner_gamer_X';\r\nexport const WINNER_GAMER_O = 'winner_gamer_O';\r\nexport const DRAW = 'draw';\r\n// cell\r\nexport const CELL_MARK_X = 'cell-mark-x';\r\nexport const CELL_MARK_O = 'cell-mark-o';\r\nexport const CELL_VICTORY_LINE = 'cell-victory-line';\r\nexport const CELL_VICTORY_LINE_DIRECTION_VERTICAL = 'direction-vertical';\r\nexport const CELL_VICTORY_LINE_DIRECTION_HORIZONTAL = 'direction-horizontal';\r\nexport const CELL_VICTORY_LINE_DIAGONAL_RIGHT = 'direction-diagonal-right';\r\nexport const CELL_VICTORY_LINE_DIAGONAL_LEFT = 'direction-diagonal-left';\r\n// marks\r\nexport const MARK_X = 'mark-x';\r\nexport const MARK_O = 'mark-o';\r\n\r\n/* -------------------------------------------------------- */\r\n// constants for JS code\r\n// cell\r\nexport const CELL = 'cell';\r\nexport const CELL_MARK = 'cell-mark';\r\n// marks\r\nexport const PLAYER_MARK = 'player-mark';\r\n\r\n/* -------------------------------------------------------- */\r\n// other\r\nexport const DISABLE = 'disable';\r\nexport const HIDDEN = 'hidden';\r\n","'use strict';\r\n\r\nimport {\r\n    CELL,\r\n    CELL_MARK,\r\n    CELL_MARK_O,\r\n    CELL_MARK_X,\r\n    CELL_VICTORY_LINE,\r\n    CELL_VICTORY_LINE_DIAGONAL_LEFT,\r\n    CELL_VICTORY_LINE_DIAGONAL_RIGHT,\r\n    CELL_VICTORY_LINE_DIRECTION_HORIZONTAL,\r\n    CELL_VICTORY_LINE_DIRECTION_VERTICAL,\r\n    DISABLE,\r\n    DRAW,\r\n    HIDDEN,\r\n    MARK_O,\r\n    MARK_X,\r\n    MOVE_GAMER_O,\r\n    MOVE_GAMER_X,\r\n    PLAYER_MARK,\r\n    WINNER_GAMER_O,\r\n    WINNER_GAMER_X,\r\n} from \"../consts\";\r\nimport {\r\n    COORDINATE,\r\n    ICoordinate,\r\n    IWinnerInformation,\r\n    ORIENTATION,\r\n    PLAYER,\r\n    WINNER\r\n} from \"../GameBoardState/declaration/GameBoardState\";\r\nimport {\r\n    GAME_BOARD_HTML_ELEMENT_ID, STATISTICS_COUNT_VALUE_DRAW,\r\n    STATISTICS_COUNT_VALUE_WIN_O,\r\n    STATISTICS_COUNT_VALUE_WIN_X\r\n} from \"../constants/constants\";\r\nimport GameBoardState from \"../GameBoardState/GameBoardState\";\r\nimport {LocalStorageKeys, setValueForLocalStorage} from \"../localStorage/localStorage\";\r\nimport {updateStatisticInformation} from \"../statisticInfo/statisticInfo\";\r\n\r\nexport function createMarkHtmlElement(mark: PLAYER.X | PLAYER.O, hiddenMark = true): HTMLElement {\r\n    const markHtmlElement = document.createElement('span');\r\n\r\n    markHtmlElement.setAttribute('class', `gameBoard__mark gameBoardMark`);\r\n\r\n    switch (mark) {\r\n        case PLAYER.X: {\r\n            markHtmlElement.setAttribute(PLAYER_MARK, String(PLAYER.X));\r\n\r\n            markHtmlElement.classList.add(MARK_X);\r\n\r\n            markHtmlElement.innerText = PLAYER.X;\r\n\r\n            break;\r\n        }\r\n        case PLAYER.O: {\r\n            markHtmlElement.setAttribute(PLAYER_MARK, String(PLAYER.O));\r\n\r\n            markHtmlElement.classList.add(MARK_O);\r\n\r\n            markHtmlElement.innerText = PLAYER.O;\r\n\r\n            break;\r\n        }\r\n        default: {\r\n            markHtmlElement.classList.remove(CELL_MARK);\r\n        }\r\n    }\r\n\r\n    if (hiddenMark) {\r\n        markHtmlElement.classList.add(HIDDEN);\r\n    }\r\n\r\n    return markHtmlElement;\r\n}\r\n\r\nexport function createCellHtmlElement(coordinate: ICoordinate, mark?: PLAYER): HTMLElement {\r\n    const {x, y} = coordinate;\r\n    const gameCell = document.createElement('div');\r\n\r\n    gameCell.setAttribute('class', `gameBoard__cell gameBoardCell`);\r\n    gameCell.setAttribute(COORDINATE.X, String(x));\r\n    gameCell.setAttribute(COORDINATE.Y, String(y));\r\n    gameCell.setAttribute(CELL, CELL);\r\n\r\n    if (mark === PLAYER.X || mark === PLAYER.O) {\r\n        _markCellHtmlElement(gameCell, mark);\r\n    }\r\n\r\n    return gameCell;\r\n}\r\n\r\nexport function createCell(coordinate: ICoordinate, mark?: PLAYER) {\r\n    const cellHtmlElement = createCellHtmlElement(coordinate, mark);\r\n\r\n    if (mark === PLAYER.X || mark === PLAYER.O) {\r\n        const markHtmlElement = createMarkHtmlElement(mark, false);\r\n\r\n        cellHtmlElement.appendChild(markHtmlElement);\r\n\r\n        return cellHtmlElement;\r\n    }\r\n\r\n    const markHtmlElement_X = createMarkHtmlElement(PLAYER.X, true);\r\n    const markHtmlElement_O = createMarkHtmlElement(PLAYER.O, true);\r\n\r\n    cellHtmlElement.appendChild(markHtmlElement_X);\r\n    cellHtmlElement.appendChild(markHtmlElement_O);\r\n\r\n    return cellHtmlElement;\r\n}\r\n\r\nexport function createCellsArray(board: PLAYER[][]): HTMLElement[][] {\r\n    const gameBoardTable = [];\r\n\r\n    for (let y = 1; y <= board.length; y++) {\r\n        const gameBoardRow = [];\r\n\r\n        for(let x = 1; x <= board.length; x++) {\r\n            let gameCell;\r\n            const currentValueForCellGameBoardState = board[y - 1][x - 1];\r\n\r\n            gameCell = createCell({x, y}, currentValueForCellGameBoardState)\r\n            gameBoardRow.push(gameCell);\r\n        }\r\n\r\n        gameBoardTable.push(gameBoardRow);\r\n    }\r\n\r\n    return gameBoardTable;\r\n}\r\n\r\nexport function fillGameBoardHtmlElement(\r\n    gameBoardHtmlElement: HTMLElement,\r\n    gameBoardState: GameBoardState,\r\n) {\r\n    const {\r\n        winnerInformation,\r\n        board,\r\n        playerWalks,\r\n    } = gameBoardState;\r\n    const {\r\n        winner,\r\n        winnerDirectionLine,\r\n        winningLine,\r\n    } = winnerInformation;\r\n\r\n    const isEndGame = winner === WINNER.PLAYER_X || winner === WINNER.PLAYER_O || winner === WINNER.DRAW;\r\n    const isWinGame =  winner === WINNER.PLAYER_X || winner === WINNER.PLAYER_O;\r\n\r\n    if (gameBoardHtmlElement) {\r\n        _resetGameBoardHtmlElement(gameBoardHtmlElement);\r\n    }\r\n\r\n    const gameBoardCellsArray = createCellsArray(board);\r\n\r\n    gameBoardHtmlElement.setAttribute('id', GAME_BOARD_HTML_ELEMENT_ID);\r\n    gameBoardHtmlElement.setAttribute('class', `gameBoard`);\r\n\r\n    if (isEndGame) {\r\n        setWinnerForGameBoard(gameBoardHtmlElement, winner);\r\n    }\r\n    else {\r\n        togglePlayerWalksForGameBoard(gameBoardHtmlElement, playerWalks);\r\n    }\r\n\r\n    for (const currentRow of gameBoardCellsArray) {\r\n        const gameBoardRow = document.createElement('div');\r\n\r\n        gameBoardRow.setAttribute('class', 'gameBoard__row');\r\n\r\n        for (const currentCell of currentRow) {\r\n            gameBoardRow.appendChild(currentCell);\r\n        }\r\n\r\n        gameBoardHtmlElement.appendChild(gameBoardRow);\r\n    }\r\n\r\n    if (isWinGame && winningLine && winnerDirectionLine) {\r\n        crossOutWinningLine(\r\n            gameBoardHtmlElement,\r\n            winningLine,\r\n            winnerDirectionLine,\r\n        );\r\n    }\r\n}\r\n\r\nexport function markCell(cell: HTMLElement, player: PLAYER.X | PLAYER.O) {\r\n    const cellMarks = [...cell?.children as unknown as HTMLElement[]];\r\n\r\n    if (checkCellHtmlElementHasMark(cell)) {\r\n        throw new Error('Cell is marked!');\r\n    }\r\n\r\n    for (const currentMarkHtmlElement of cellMarks) {\r\n        const isMark_X = checkWhoseMarkHtmlElement(currentMarkHtmlElement, PLAYER.X);\r\n        const isMark_O = checkWhoseMarkHtmlElement(currentMarkHtmlElement, PLAYER.O);\r\n        \r\n        switch (player) {\r\n            case PLAYER.X: {\r\n                if (isMark_X) {\r\n                    currentMarkHtmlElement.classList.remove(HIDDEN);\r\n                }\r\n                else if (isMark_O) {\r\n                    cell.removeChild(currentMarkHtmlElement);\r\n                }\r\n\r\n                break;\r\n            }\r\n            case PLAYER.O: {\r\n                if (isMark_X) {\r\n                    cell.removeChild(currentMarkHtmlElement);\r\n                }\r\n                else if (isMark_O) {\r\n                    currentMarkHtmlElement.classList.remove(HIDDEN);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    _markCellHtmlElement(cell, player);\r\n}\r\n\r\nexport function togglePlayerWalksForGameBoard(gameBoard: HTMLElement, playerWalks: PLAYER.X | PLAYER.O): void {\r\n    switch(playerWalks) {\r\n        case PLAYER.X: {\r\n            gameBoard.classList.add(MOVE_GAMER_X);\r\n            gameBoard.classList.remove(MOVE_GAMER_O);\r\n\r\n            break;\r\n        }\r\n        case PLAYER.O: {\r\n            gameBoard.classList.add(MOVE_GAMER_O);\r\n            gameBoard.classList.remove(MOVE_GAMER_X);\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function setWinnerForGameBoard(\r\n    gameBoard: HTMLElement,\r\n    winner: WINNER.PLAYER_X | WINNER.PLAYER_O | WINNER.DRAW,\r\n): void {\r\n    gameBoard.setAttribute(DISABLE, DISABLE);\r\n    gameBoard.classList.add(DISABLE);\r\n\r\n    switch(winner) {\r\n        case WINNER.PLAYER_X: {\r\n            gameBoard.classList.add(WINNER_GAMER_X);\r\n\r\n            break;\r\n        }\r\n        case WINNER.PLAYER_O: {\r\n            gameBoard.classList.add(WINNER_GAMER_O);\r\n\r\n            break;\r\n        }\r\n        case WINNER.DRAW: {\r\n            gameBoard.classList.add(DRAW);\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getClickedCell(clickedChild: HTMLElement): HTMLElement | null {\r\n    const clickedCell = clickedChild.closest(`[${CELL}=${CELL}]`);\r\n\r\n    if (!clickedCell) {\r\n        return null;\r\n    }\r\n\r\n    return clickedCell as HTMLElement;\r\n}\r\n\r\nexport function getCoordinateForClickedCell(clickedCell: HTMLElement): ICoordinate {\r\n    const x = clickedCell.getAttribute(COORDINATE.X);\r\n    const y = clickedCell.getAttribute(COORDINATE.Y);\r\n\r\n    if (!x || !y) {\r\n        throw new Error('Coordinate is not valid!');\r\n    }\r\n\r\n    return {\r\n        x: Number(x),\r\n        y: Number(y),\r\n    };\r\n}\r\n\r\nexport function checkCellHtmlElementHasMark(cell: HTMLElement, player?: PLAYER): boolean {\r\n    const mark = cell.getAttribute(CELL_MARK);\r\n\r\n    switch (player) {\r\n        case PLAYER.X: {\r\n            return mark === PLAYER.X;\r\n        }\r\n        case PLAYER.O: {\r\n            return mark === PLAYER.O;\r\n        }\r\n        default: {\r\n            return mark === PLAYER.X || mark === PLAYER.O;\r\n        }\r\n    }\r\n}\r\n\r\nexport function checkWhoseMarkHtmlElement(markHtmlElement: HTMLElement, player: PLAYER.X | PLAYER.O): boolean {\r\n    const playerMarkAttribute = markHtmlElement.getAttribute(PLAYER_MARK);\r\n\r\n    switch (player) {\r\n        case PLAYER.X: {\r\n            return playerMarkAttribute === PLAYER.X;\r\n        }\r\n        case PLAYER.O: {\r\n            return playerMarkAttribute === PLAYER.O;\r\n        }\r\n    }\r\n}\r\n\r\nexport function onClickGameBoard(this: HTMLElement, event: MouseEvent, gameBoardState: GameBoardState) {\r\n    const gameBoardHtmlElement = this;\r\n    let isDisable = gameBoardHtmlElement.getAttribute(DISABLE);\r\n    const currentGameCell = getClickedCell(event.target as HTMLElement);\r\n\r\n    if (!currentGameCell || isDisable) {\r\n        return;\r\n    }\r\n\r\n    const isMarkedCell = checkCellHtmlElementHasMark(currentGameCell);\r\n    const coordinate = getCoordinateForClickedCell(currentGameCell);\r\n\r\n    if (isMarkedCell) {\r\n        return;\r\n    }\r\n\r\n    const playerWalks = gameBoardState.playerWalks;\r\n\r\n    markCell(currentGameCell, playerWalks);\r\n\r\n    gameBoardState.addMark(coordinate);\r\n\r\n    // получим этот аттрибут ещё раз, он после победы добавляется\r\n    isDisable = gameBoardHtmlElement.getAttribute(DISABLE);\r\n\r\n    if (!isDisable) {\r\n        togglePlayerWalksForGameBoard(this, gameBoardState.playerWalks);\r\n    }\r\n\r\n    setValueForLocalStorage(LocalStorageKeys.gameBoardStateKey, gameBoardState.toJSON());\r\n}\r\n\r\nfunction _markCellHtmlElement(cell: HTMLElement, player: PLAYER.X | PLAYER.O): void {\r\n    cell.classList.add(CELL_MARK);\r\n\r\n    switch (player) {\r\n        case PLAYER.X: {\r\n            cell.setAttribute(CELL_MARK, String(PLAYER.X));\r\n            cell.classList.add(CELL_MARK_X);\r\n\r\n            break;\r\n        }\r\n        case PLAYER.O: {\r\n            cell.setAttribute(CELL_MARK, String(PLAYER.O));\r\n            cell.classList.add(CELL_MARK_O);\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function handleEndGame(gameBoardHtmlElement: HTMLElement, winnerInformation: IWinnerInformation) {\r\n    const {\r\n        winner,\r\n        winnerDirectionLine,\r\n        winningLine,\r\n        statistics,\r\n    } = winnerInformation;\r\n    const {\r\n        countDraw,\r\n        countWin_o,\r\n        countWin_x,\r\n    } = statistics;\r\n\r\n    if (!gameBoardHtmlElement) {\r\n        throw new Error('gameBoardHtmlElement is not found!');\r\n    }\r\n\r\n    gameBoardHtmlElement.setAttribute(DISABLE, DISABLE);\r\n\r\n    gameBoardHtmlElement.classList.remove(MOVE_GAMER_O);\r\n    gameBoardHtmlElement.classList.remove(MOVE_GAMER_X);\r\n    gameBoardHtmlElement.classList.add(DISABLE);\r\n\r\n    switch(winner) {\r\n        case WINNER.PLAYER_X: {\r\n            gameBoardHtmlElement.classList.add(WINNER_GAMER_X);\r\n\r\n            break;\r\n        }\r\n        case WINNER.PLAYER_O: {\r\n            gameBoardHtmlElement.classList.add(WINNER_GAMER_O);\r\n\r\n            break;\r\n        }\r\n        case WINNER.DRAW: {\r\n            gameBoardHtmlElement.classList.add(DRAW);\r\n\r\n            break;\r\n        }\r\n        default: {\r\n            throw new Error('Winner is not defined!')\r\n        }\r\n    }\r\n\r\n    if ((winner !== WINNER.DRAW) &&  winningLine && winnerDirectionLine) {\r\n        crossOutWinningLine(gameBoardHtmlElement, winningLine, winnerDirectionLine);\r\n    }\r\n\r\n    updateStatisticInformation(\r\n        String(countWin_x),\r\n        String(countWin_o),\r\n        String(countDraw),\r\n    );\r\n}\r\n\r\nexport function crossOutWinningLine(\r\n    board: HTMLElement,\r\n    winningLineCoordinatesArray: ICoordinate[],\r\n    orientation: ORIENTATION,\r\n    ) {\r\n    const cellsBoard = getGameBoardCellsArray(board);\r\n\r\n    for (const coordinate of winningLineCoordinatesArray) {\r\n        const { x, y } = coordinate;\r\n        const cellHtmlElement = cellsBoard[y][x];\r\n\r\n        addWinningMarkForCell(cellHtmlElement, orientation)\r\n    }\r\n}\r\n\r\nfunction addWinningMarkForCell(\r\n    cell: HTMLElement,\r\n    orientation: ORIENTATION,\r\n) {\r\n    cell.classList.add(CELL_VICTORY_LINE);\r\n\r\n    switch(orientation) {\r\n        case ORIENTATION.VERTICAL: {\r\n            cell.classList.add(CELL_VICTORY_LINE_DIRECTION_VERTICAL);\r\n\r\n            break;\r\n        }\r\n        case ORIENTATION.HORIZONTAL: {\r\n            cell.classList.add(CELL_VICTORY_LINE_DIRECTION_HORIZONTAL);\r\n\r\n            break;\r\n        }\r\n        case ORIENTATION.DIAGONAL_LEFT: {\r\n            cell.classList.add(CELL_VICTORY_LINE_DIAGONAL_LEFT);\r\n\r\n            break;\r\n        }\r\n        case ORIENTATION.DIAGONAL_RIGHT: {\r\n            cell.classList.add(CELL_VICTORY_LINE_DIAGONAL_RIGHT);\r\n\r\n            break;\r\n        }\r\n        default: {\r\n            console.error('Unknown orientation!');\r\n        }\r\n    }\r\n}\r\n\r\nexport function getGameBoardCellsArray(board: HTMLElement) {\r\n    const rowsBoard = [ ...board.children as unknown as HTMLElement[] ];\r\n\r\n    return rowsBoard.map((rowHtmlElement: HTMLElement) => {\r\n        return [ ...rowHtmlElement.children as unknown as HTMLElement[] ];\r\n    });\r\n}\r\n\r\nexport function handleReloadGame(\r\n    gameBoardHtmlElement: HTMLElement,\r\n    gameBoardState: GameBoardState,\r\n) {\r\n    gameBoardState.restartGame();\r\n\r\n    fillGameBoardHtmlElement(gameBoardHtmlElement, gameBoardState);\r\n\r\n    setValueForLocalStorage(LocalStorageKeys.gameBoardStateKey, gameBoardState.toJSON());\r\n}\r\n\r\nexport function handleStartGame(\r\n    gameBoardHtmlElement: HTMLElement,\r\n    options: {\r\n        size?: number,\r\n        firstPlayerWalks?: PLAYER.X | PLAYER.O,\r\n        winningStreak?: number,\r\n    }\r\n) {\r\n    const {\r\n        size = 3,\r\n        winningStreak = 3,\r\n        firstPlayerWalks = PLAYER.X,\r\n    } = options;\r\n\r\n    const gameBoardState = new GameBoardState({\r\n        size,\r\n        firstPlayerWalks,\r\n        winningStreak,\r\n    });\r\n\r\n    _resetGameBoardHtmlElement(gameBoardHtmlElement);\r\n\r\n    gameBoardState.restartGame();\r\n\r\n    fillGameBoardHtmlElement(gameBoardHtmlElement, gameBoardState);\r\n\r\n    setValueForLocalStorage(LocalStorageKeys.gameBoardStateKey, gameBoardState.toJSON());\r\n\r\n    return gameBoardState;\r\n}\r\n\r\nfunction _resetGameBoardHtmlElement(gameBoard: HTMLElement) {\r\n    gameBoard.innerHTML = '';\r\n\r\n    while (gameBoard.attributes.length > 0) {\r\n        gameBoard.removeAttribute(gameBoard.attributes[0].name);\r\n    }\r\n}","'use strict';\r\n\r\nexport const enum LocalStorageKeys {\r\n    playingFieldDimension = 'playingFieldDimension',\r\n    winningStreakDimension = 'winningStreakDimension',\r\n    gameBoardStateKey = 'gameBoardState',\r\n}\r\n\r\nexport function setValueForLocalStorage(key: LocalStorageKeys, value: any) {\r\n    localStorage.setItem(key, value);\r\n}\r\n\r\nexport function getValueForLocalStorage(key: LocalStorageKeys) {\r\n    return localStorage.getItem(key);\r\n}","'use strict';\r\n\r\nimport {\r\n    STATISTICS_COUNT_VALUE_DRAW,\r\n    STATISTICS_COUNT_VALUE_WIN_O,\r\n    STATISTICS_COUNT_VALUE_WIN_X\r\n} from \"../constants/constants\";\r\nimport GameBoardState from \"../GameBoardState/GameBoardState\";\r\nimport {LocalStorageKeys, setValueForLocalStorage} from \"../localStorage/localStorage\";\r\n\r\nexport function updateStatisticInformation(\r\n    countWinGame_x: string,\r\n    countWinGame_o: string,\r\n    countDrawGame: string,\r\n) {\r\n    const countWinOHtmlElement = document.getElementById(STATISTICS_COUNT_VALUE_WIN_O) as HTMLElement | null;\r\n    const countWinXHtmlElement = document.getElementById(STATISTICS_COUNT_VALUE_WIN_X) as HTMLElement | null;\r\n    const countDrawHtmlElement = document.getElementById(STATISTICS_COUNT_VALUE_DRAW) as HTMLElement | null;\r\n\r\n    if (!countWinOHtmlElement || !countWinXHtmlElement || !countDrawHtmlElement) {\r\n        throw new Error('countWinOHtmlElement || countWinXHtmlElement || countDrawHtmlElement is not defined!');\r\n    }\r\n\r\n    countWinOHtmlElement.innerText = countWinGame_o;\r\n    countWinXHtmlElement.innerText = countWinGame_x;\r\n    countDrawHtmlElement.innerText = countDrawGame;\r\n}\r\n\r\nexport function handleResetStatistics(gameBoardState: GameBoardState) {\r\n    gameBoardState.resetStatistics();\r\n\r\n    setValueForLocalStorage(LocalStorageKeys.gameBoardStateKey, gameBoardState.toJSON());\r\n\r\n    const {\r\n        countWin_x,\r\n        countWin_o,\r\n        countDraw,\r\n    } = gameBoardState.winnerInformation.statistics;\r\n\r\n    updateStatisticInformation(\r\n        String(countWin_x),\r\n        String(countWin_o),\r\n        String(countDraw),\r\n    );\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.ts\");\n",""],"names":[],"sourceRoot":""}