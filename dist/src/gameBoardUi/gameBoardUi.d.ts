import { ICoordinate, IWinnerInformation, ORIENTATION, PLAYER, WINNER } from "../GameBoardState/declaration/GameBoardState";
import GameBoardState from "../GameBoardState/GameBoardState";
export declare function createMarkHtmlElement(mark: PLAYER.X | PLAYER.O, hiddenMark?: boolean): HTMLElement;
export declare function createCellHtmlElement(coordinate: ICoordinate, mark?: PLAYER): HTMLElement;
export declare function createCell(coordinate: ICoordinate, mark?: PLAYER): HTMLElement;
export declare function createCellsArray(board: PLAYER[][]): HTMLElement[][];
export declare function fillGameBoardHtmlElement(gameBoardHtmlElement: HTMLElement, gameBoardState: GameBoardState): void;
export declare function markCell(cell: HTMLElement, player: PLAYER.X | PLAYER.O): void;
export declare function togglePlayerWalksForGameBoard(gameBoard: HTMLElement, playerWalks: PLAYER.X | PLAYER.O): void;
export declare function setWinnerForGameBoard(gameBoard: HTMLElement, winner: WINNER.PLAYER_X | WINNER.PLAYER_O | WINNER.DRAW): void;
export declare function getClickedCell(clickedChild: HTMLElement): HTMLElement | null;
export declare function getCoordinateForClickedCell(clickedCell: HTMLElement): ICoordinate;
export declare function checkCellHtmlElementHasMark(cell: HTMLElement, player?: PLAYER): boolean;
export declare function checkWhoseMarkHtmlElement(markHtmlElement: HTMLElement, player: PLAYER.X | PLAYER.O): boolean;
export declare function onClickGameBoard(this: HTMLElement, event: MouseEvent, gameBoardState: GameBoardState): void;
export declare function handleEndGame(gameBoardHtmlElement: HTMLElement, winnerInformation: IWinnerInformation): void;
export declare function crossOutWinningLine(board: HTMLElement, winningLineCoordinatesArray: ICoordinate[], orientation: ORIENTATION): void;
export declare function getGameBoardCellsArray(board: HTMLElement): HTMLElement[][];
export declare function handleReloadGame(gameBoardHtmlElement: HTMLElement, gameBoardState: GameBoardState): void;
export declare function handleStartGame(gameBoardHtmlElement: HTMLElement, options: {
    size?: number;
    firstPlayerWalks?: PLAYER.X | PLAYER.O;
    winningStreak?: number;
}): GameBoardState;
